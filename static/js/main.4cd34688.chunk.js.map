{"version":3,"sources":["TodoItem.js","dataFile.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","completedStyle","fontStyle","color","textDecoration","className","style","height","width","onClick","handleChange","item","id","fontSize","completed","aria-hidden","title","time","dataJSON","App","state","todos","newTodo","bind","updateText","addTodo","this","setState","prevState","map","todo","newTodoData","$","hide","removeClass","remove","Date","newData","length","moment","format","push","event","target","value","todoItems","key","backgroundColor","data-toggle","data-target","tabIndex","role","aria-labelledby","type","data-dismiss","aria-label","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cd34688.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\r\n\r\nfunction TodoItem(props){\r\n    const completedStyle = {\r\n            fontStyle: \"italic\",\r\n            color: \"cdcdcd\",\r\n            textDecoration: \"line-through\",\r\n}\r\n    return(\r\n        <div>\r\n            <div className=\"row justify-content-between\">\r\n                <div className=\"rounded-circle border d-flex justify-content-center align-items-center\" style={{ height: \"40px\", width: \"40px\" }}\r\n                onClick={() => props.handleChange(props.item.id)}>\r\n                    \r\n                    <div style={{ color: \"#5b75e3\", fontSize: \"25px\" }}><i className={props.item.completed ? 'fa fa-check': null} aria-hidden=\"true\"></i></div>\r\n                    \r\n                </div>\r\n                <div className=\"d-flex justify-content-between align-items-center border-bottom\" style={{ width: \"85%\" }}>\r\n                    <div>\r\n                        <p style={props.item.completed ? completedStyle: null}>{props.item.title}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p style={props.item.completed ? completedStyle: null}>{props.item.time}</p>\r\n                    </div>\r\n                </div>\r\n                \r\n\r\n            </div>\r\n            <div className=\"container m-5\"></div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default TodoItem","var dataJSON = []\r\n\r\nexport default dataJSON;","import React from 'react';\nimport moment from 'moment';\n\nimport './App.css';\nimport TodoItem from './TodoItem'\nimport dataJSON from './dataFile'\nimport $ from 'jquery'\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      todos: dataJSON\n    }\n    this.newTodo = \"\";\n    this.handleChange = this.handleChange.bind(this);\n    this.updateText = this.updateText.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  handleChange(id) {\n    this.setState(prevState => {\n      const updatedTodos = prevState.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n      return {\n        todos: updatedTodos\n      }\n    })\n  }\n\n  addTodo(newTodoData) {\n    $('#exampleModal').hide('hide');\n    $('body').removeClass('modal-open');\n    $('.modal-backdrop').remove();\n    const timeOfTodo = new Date();\n    const newData = {\n      \"userId\": 1,\n      \"id\": dataJSON.length + 1,\n      \"title\": newTodoData,\n      \"completed\": false,\n      \"time\": moment().format('LT')\n    }\n    dataJSON.push(newData);\n    this.setState(prevState => {\n      return {\n        todos: dataJSON\n      }\n    })\n  }\n\n  updateText(event) {\n    this.newTodo = event.target.value;\n  }\n\n  render() {\n    const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange} />)\n\n    return (\n      <div className=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column box-1\">\n        <div className=\"box-2\">\n          <div className=\"box-3\">\n            <div className=\"row pt-5 justify-content-between align-items-center\">\n              <div>\n                <h3>{moment().format('dddd, Do MMM')}</h3>\n              </div>\n              <div>\n                <div >\n                  <div className=\"d-flex justify-content-center align-items-center rounded-circle\" style={{ width: \"80px\", height: \"80px\", backgroundColor: \"#5b75e3\" }}>\n                    <p className=\"add\" data-toggle=\"modal\" data-target=\"#exampleModal\">+</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              {this.state.todos.length ? <p className=\"h4\" style={{ color: \"#5b75e3\" }}>{this.state.todos.length} tasks</p> : <p className=\"h4\" style={{ color: \"#5b75e3\" }}>Task list is empty</p>}\n\n            </div>\n            <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n              <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header border-0\">\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Enter Task</h5>\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                      <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    <form>\n                      <input type=\"text\" style={{ width: \"100%\" }} onChange={this.updateText}></input>\n                    </form>\n                  </div>\n                  <div className=\"modal-footer border-0\">\n                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => { this.addTodo(this.newTodo) }}>Save changes</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"container m-5\"></div>\n            {this.state.todos.length ? todoItems : <p className=\"h1 text-center\">Get Started</p>}\n\n          </div>\n\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Popper from \"popper.js\";\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}